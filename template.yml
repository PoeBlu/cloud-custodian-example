Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
Resources:
  SecurityGroup:
     Type: AWS::EC2::SecurityGroup
     Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: '0.0.0.0/0'

  # VPC:
  #    Type: AWS::EC2::VPC
  #    Properties:
  #     CidrBlock: 10.0.0.0/16
  #
  # Subnet:
  #   DependsOn: VPC
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: 10.0.0.0/24

  User:
    Type: AWS::IAM::User
    Properties:
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"
  Keys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref User

  DirtyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-22ce4934
      Tags:
        - Key: DirtyInstance
          Value: yup

  CustodianInstance:
    Type: AWS::EC2::Instance
    DependsOn:
      - User
      - Keys
      # - Subnet
      - SecurityGroup
      - DirtyInstance
    Metadata:
      Comment: Cloud Custodian Config File
      AWS::CloudFormation::Init:
        config:
          files:
            /root/custodian.yml:
              content: !Sub |
                policies:
                  - name: keep-instance-policy
                    resource: ec2
                    filters:
                      - "tag:DirtyInstance": present
                    actions:
                      - terminate
              mode: "000600"
              owner: root
              group: root
    Properties:
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SecurityGroup
      # SubnetId: !Ref Subnet
      InstanceType: t2.micro
      ImageId: ami-22ce4934
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DirtyInstance --region ${AWS::Region}
          cd /root
          virtualenv custodian
          source source custodian/bin/activate
          pip install c7n
          echo "[default]" >> ~/.aws/credentials
          echo "aws_access_key_id=${Keys}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${Keys.SecretAccessKey}" >> ~/.aws/credentials
          custodian run --output-dir=. /root/custodian.yml
